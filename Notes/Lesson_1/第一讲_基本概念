通过图书的组织方式说明：解决问题方法的效率，跟数据的组织方式有关。 （数据的存和取）

递归的程序对空间的占用很大，尽管容易理解, PrintN( int N ) 为例说明： 解决问题方法的效率，跟空间的利用效率有关，

多项式乘法为例说明：解决问题方法的效率，跟算法的巧妙程度有关。

clock():捕捉从程序开始运行到clock()被调用所耗费的时间。这个时间单位是clock tick,即“时钟打点”。
常数CLK_TCK：机器时钟每秒所走的时钟打点数。

clock()函数原型被包含在 time.h 头文件中，它的返回值类型为 clock_t

程序中有两个片段的代码几乎相同 —— 将这段代码用函数实现 （将函数作为函数参数 —— 通过函数指针来实现）

数据结构在计算机中的组织方式： 逻辑结构、物理存储结构

抽象数据类型（Abstract Data Type） —— 以“矩阵”为例
数据类型：
  数据对象集
  数据集合相关联的操作集

抽象：描述数据类型的方法不依赖于具体实现
  与存放数据的机器无关
  与数据存储的物理结构无关
  与实现操作的算法和编程语言均无关
  

算法（Algorithm）  ---- 选择排序算法的伪码描述为例
  一个有限指令集
  接受一些输入（有些情况不需要输入）
  产生输出
  在有限步骤之后终止
  每一条指令必须
    有充分明确的目标，不可以有歧义
    计算机能处理的范围之内
    描述应不依赖于任何一种计算机语言以及具体实现

什么是好的算法？
  空间复杂度S(n) --- 根据算法写成的程序在执行时占用存储单元的长度。这个长度往往与输入数据的规模有关。空间复杂度过高的算法可能导致使用的内存超限，
  造成程序非正常中断。
  
  时间复杂度T(n) --- 根据算法写成的程序在执行时耗费时间的长度。这个长度往往也与输入数据的规模有关。时间复杂度过高的低效算法可能导致我们在有生之
  年都等不到运行结果。
  
机器运算加减法比乘除快很多，所以当有乘除和加减时，可以只关注乘除。

分析算法，一般分析 最坏情况复杂度 而不是 平均复杂度

复杂度的渐进表示法

将复杂度为 O(n^2) 的算法优化为 O(nlgn) 的方法：分治
