线性表的插入操作（数组表示）：
1.表要没有满 2.插入的位置要合法 3.记得更新Last，让它仍指向最后一个元素。
4.在第i个位置上插入一个值为X的元素，数组的起始下标为0，所以第i个位置的下标为i - 1。

线性表的删除操作（数组表示）：
1.表不能为空 2.删除的位置要合法 3.记得更新Last，让他仍指向最后一个元素。 

顺序表可以用数组实现，也可以用链表实现

求表长：
int Length ( List PtrL )
{ List p = PtrL; /* p指向表的第一个结点*/
  int j = 0;
  while ( p ) {
    p = p->Next;
    j++; /* 当前p指向的是第 j 个结点*/
  }
  return j;
}
Ptrl是不是链表的第一个结点？（感觉不是）

按序号查找: FindKth
List FindKth( int K, List PtrL )
{ List p = PtrL;
  int i = 1;
  while (p !=NULL && i < K ){
    p = p->Next;
    i++;
  }
  if ( i == K ) return p;
  /* 找到第K个，返回指针 */
  else return NULL;
  /* 否则返回空 */
  
  //思考为什么不能直接简化为 return p; 像下面的按值查找一样
}

按值查找: 
List Find( ElementType X, List PtrL )
{
  List p = PtrL;
  while ( p!=NULL && p->Data != X )
    p = p->Next;
  return p; //如果发现 p != NULL， 则说明找到了
}

插入操作：
1.插入在第一个位置需要单独处理，插入到最后不需要（程序可以正常解决）
2.异常处理

删除：
1.记得释放被删除的结点（通过malloc分配的空间可以用free释放掉）
2.先把要删除的结点赋给一个指针变量，不然完成“删除”操作后，没有办法free掉旧的结点
3.删除表的第一个结点单独处理，删除最后一个结点不需要单独处理
4.异常处理

广义表
多重链表，十字链表——一种典型的多重链表



























