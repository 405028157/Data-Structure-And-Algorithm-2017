由于非递归函数的执行效率高，可将“尾递归”函数改为迭代函数

要删除的结点有左、右两棵子树：
用另一结点替代被删除结点：右子树的最小元素 或者 左子树的最大元素
好处：左子树的最大值和右子树的最小值一定不是有两个儿子的结点

区分二分查找树的插入次序 和 比较大小的顺序

本来要问的问题：
老师提到：
​要删除的结点有左、右两棵子树时，用另一结点替代被删除结点：右子树的最小元素 或者 左子树的最大元素，好处是
左子树的最大值结点 和 右子树的最小值结点 一定不是有两个儿子的结点。
但是我感觉 左子树的最小值结点 和 右子树的最大值结点 同样不可能有两个儿子啊？

//这里的 儿子 不仅仅指 亲儿子，后面的孙子也算
修改上面那句话，



